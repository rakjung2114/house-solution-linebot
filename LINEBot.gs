// LINE Bot Handler - Configuration is now in Configuration.gs to avoid duplication

// ==================== Main Webhook Handler ====================
/**
 * Handles GET requests for LINE Bot verification and Admin Web App
 */
function doGet(e) {
  try {
    console.log('doGet called with parameters:', JSON.stringify(e ? e.parameter : 'no parameters'));
    
    // Handle debug page request
    if (e && e.parameter && e.parameter.debug === 'true') {
      console.log('Showing debug center page');
      return HtmlService.createHtmlOutputFromFile('debug-center.html')
          .setTitle('ü§ñ LINE Bot Debug Center')
          .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô LINE Bot webhook verification ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (e && e.parameter) {
      // ‡∏´‡∏≤‡∏Å‡∏°‡∏µ hub.challenge ‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠ verify webhook
      if (e.parameter['hub.challenge']) {
        console.log('LINE webhook verification challenge:', e.parameter['hub.challenge']);
        return ContentService.createTextOutput(e.parameter['hub.challenge'])
          .setMimeType(ContentService.MimeType.TEXT);
      }
      
      // Handle specific actions for testing
      if (e.parameter.action) {
        const action = e.parameter.action;
        console.log('Handling action:', action);
        
        switch (action) {
          case 'testLineBotConnection':
            return ContentService.createTextOutput(JSON.stringify(testLineBotConnection()))
                .setMimeType(ContentService.MimeType.JSON);
                
          case 'testUserConnection':
            return ContentService.createTextOutput(JSON.stringify(testUserConnection()))
                .setMimeType(ContentService.MimeType.JSON);
                
          case 'getWebAppInfo':
            return ContentService.createTextOutput(JSON.stringify({
              success: true,
              data: {
                webappUrl: ScriptApp.getService().getUrl(),
                scriptId: ScriptApp.getScriptId()
              }
            })).setMimeType(ContentService.MimeType.JSON);
            
          default:
            // ‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á AdminAPI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö action ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
            console.log('Routing to AdminAPI for action:', action);
            return adminDoGet(e);
        }
      }
      
      // ‡∏´‡∏≤‡∏Å‡∏°‡∏µ parameter page=admin ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å AdminAPI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
      if (e.parameter.page === 'admin') {
        console.log('Routing to AdminAPI for admin page');
        return adminDoGet(e);
      }
    }
    
    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ parameter ‡∏´‡∏£‡∏∑‡∏≠ page=user ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏ó‡∏ô
    console.log('Showing main page with popup registration');
    return HtmlService.createHtmlOutputFromFile('main.html')
        .setTitle('The House Solution - ‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏ô‡∏¥‡∏ï‡∏¥‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•')
        .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
      
  } catch (error) {
    console.error('Error in doGet:', error);
    return ContentService.createTextOutput('Error: ' + error.message)
      .setMimeType(ContentService.MimeType.TEXT);
  }
}

function doPost(e) {
  console.log('=== doPost called ===');
  
  try {
    // **CRITICAL: ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö LINE ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô timeout (‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)**
    const immediateResponse = ContentService.createTextOutput('OK')
      .setMimeType(ContentService.MimeType.TEXT);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• POST ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß
    if (!e || !e.postData || !e.postData.contents) {
        console.log('Empty POST data - returning OK to LINE');
        return immediateResponse;
    }
    
    // Parse ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏ö‡∏ö async ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ block ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
    try {
      const postData = JSON.parse(e.postData.contents);
      const events = postData.events;
      
      if (events && events.length > 0) {
        console.log('Received', events.length, 'events - processing async');
        
        // ‡πÉ‡∏ä‡πâ ScriptApp.newTrigger ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏ö‡∏ö background
        // ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        Utilities.sleep(10); // ‡∏£‡∏≠‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÉ‡∏´‡πâ response ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô
        
        events.forEach(event => {
          try {
            processEventImmediate(event);
          } catch (eventError) {
            console.error('Event processing error:', eventError);
          }
        });
      }
    } catch (parseError) {
      console.error('JSON parse error:', parseError);
    }
    
    // ‡∏™‡πà‡∏á OK response ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏´‡πâ LINE ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    return immediateResponse;
      
  } catch (error) {
    console.error('doPost error:', error);
    // ‡∏ï‡πâ‡∏≠‡∏á return OK ‡πÄ‡∏™‡∏°‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ LINE retry
    return ContentService.createTextOutput('OK').setMimeType(ContentService.MimeType.TEXT);
  }
}

/**
 * ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• event ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ - ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
 */
function processEventImmediate(event) {
  console.log('Processing event:', event.type);
  
  if (event.type === 'message' && event.message.type === 'text') {
    const text = event.message.text.trim();
    const replyToken = event.replyToken;
    
    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏ï‡∏≠‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    if (text === 'test' || text === '‡∏ó‡∏î‡∏™‡∏≠‡∏ö') {
      quickReply(replyToken, '‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥!');
      return;
    }
    
    if (text.toLowerCase() === 'ping') {
      quickReply(replyToken, 'pong! üèì');
      return;
    }
    
    if (text === 'debug') {
      quickReply(replyToken, `üîß Debug: ${new Date().toLocaleString('th-TH')}`);
      return;
    }
    
    if (text === '‡πÄ‡∏°‡∏ô‡∏π') {
      quickReply(replyToken, 'üìã ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å\n\n‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏¥‡∏•\n‚Ä¢ ‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°\n‚Ä¢ ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô\n\n‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£');
      return;
    }
    
    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
    quickReply(replyToken, '‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•...');
  }
}

// ==================== Event Handlers ====================
function handleMessage(event) {
  console.log('=== handleMessage START ===');
  console.log('Event received:', JSON.stringify(event));
  
  const userId = event.source.userId;
  const replyToken = event.replyToken;
  
  console.log('User ID:', userId);
  console.log('Reply Token:', replyToken);
  
  if (event.message.type === 'text') {
    const text = event.message.text.trim();
    console.log('Text message received:', text);
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô
    if (text === 'test' || text === '‡∏ó‡∏î‡∏™‡∏≠‡∏ö') {
      console.log('Test message detected - sending simple reply');
      try {
        replyMessage(replyToken, [{ type: 'text', text: '‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥!' }]);
        console.log('Test reply sent successfully');
        return;
      } catch (error) {
        console.error('Error sending test reply:', error);
        return;
      }
    }
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö "ping" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    if (text.toLowerCase() === 'ping') {
      console.log('Ping message detected');
      try {
        replyMessage(replyToken, [{ type: 'text', text: 'pong! üèì' }]);
        return;
      } catch (error) {
        console.error('Error sending ping reply:', error);
        return;
      }
    }
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö token
    if (text === 'debug') {
      console.log('Debug message detected');
      try {
        const token = getChannelAccessToken();
        const hasToken = token ? '‡∏°‡∏µ Token' : '‡πÑ‡∏°‡πà‡∏°‡∏µ Token';
        replyMessage(replyToken, [{ 
          type: 'text', 
          text: `üîß Debug Info:\n${hasToken}\nTime: ${new Date().toLocaleString('th-TH')}` 
        }]);
        return;
      } catch (error) {
        console.error('Error sending debug reply:', error);
        return;
      }
    }
    
    // Check for user state (conversational context)
    const userState = getUserState(userId);
    if (userState) {
      console.log('User has state:', userState.state);
      if (userState.state === 'registering') {
        processRegistration(replyToken, userId, text);
        return;
      }
      if (userState.state === 'maintenance_reporting') {
        processMaintenanceReport(replyToken, userId, text);
        return;
      }
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
    const isRegistered = isUserRegistered(userId);
    console.log('User registered status:', isRegistered);
    
    if (!isRegistered && text !== '‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô' && text !== '‡πÄ‡∏°‡∏ô‡∏π') {
      console.log('User not registered, sending registration prompt');
      replyMessage(replyToken, [{ type: 'text', text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô"' }]);
      return;
    }
    
    console.log('Processing command:', text);
    switch (text) {
      case '‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô': 
        console.log('Handling registration');
        handleRegistration(replyToken, userId); 
        break;
      case '‡πÄ‡∏°‡∏ô‡∏π': 
        console.log('Handling menu');
        handleShowMenu(replyToken); 
        break;
      case '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ':
      case '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö':
      case '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞':
        console.log('Handling greeting');
        replyMessage(replyToken, [{ type: 'text', text: 'üè† ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà The House Solution\n‡∏û‡∏¥‡∏°‡∏û‡πå "‡πÄ‡∏°‡∏ô‡∏π" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£' }]);
        break;
      case '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏¥‡∏•': handleCheckBill(replyToken, userId); break;
      case '‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°': handleMaintenance(replyToken, userId); break;
      case '‡∏¢‡∏∑‡∏°‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå': handleEquipmentBooking(replyToken, userId); break;
      case '‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°': handleEvents(replyToken, userId); break;
      case '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠': handleContact(replyToken); break;
      case '‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå': handleProfile(replyToken, userId); break;
      default: 
        console.log('Handling default message for:', text);
        handleDefaultMessage(replyToken);
    }
  } else {
    console.log('Non-text message received:', event.message.type);
    replyMessage(replyToken, [{ type: 'text', text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô' }]);
  }
  
  console.log('=== handleMessage END ===');
}

function handlePostback(event) {
  const userId = event.source.userId;
  const replyToken = event.replyToken;
  const data = parsePostbackData(event.postback.data);
  
  switch (data.action) {
    case 'maintenanceCategory':
      startMaintenanceReport(replyToken, userId, data.category);
      break;
    case 'confirmMaintenance':
      confirmMaintenanceReport(replyToken, userId, data);
      break;
    default:
      console.log(`Unhandled postback action: ${data.action}`);
  }
}

function startMaintenanceReport(replyToken, userId, category) {
  const member = getMemberByLineId(userId);
  if (!member) {
    replyMessage(replyToken, [{ type: 'text', text: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' }]);
    return;
  }
  
  const categoryText = {
    'electrical': '‡πÑ‡∏ü‡∏ü‡πâ‡∏≤',
    'plumbing': '‡∏õ‡∏£‡∏∞‡∏õ‡∏≤', 
    'structure': '‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á',
    'other': '‡∏≠‡∏∑‡πà‡∏ô‡πÜ'
  };
  
  // ‡πÄ‡∏Å‡πá‡∏ö state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°
  setUserState(userId, 'maintenance_reporting', { 
    category: category,
    categoryText: categoryText[category],
    step: 1 
  });
  
  replyMessage(replyToken, [{
    type: 'text',
    text: `üìù ‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°${categoryText[category]}\n\n‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1/2\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö`,
    quickReply: {
      items: [{
        type: 'action',
        action: {
          type: 'message',
          label: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
          text: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°'
        }
      }]
    }
  }]);
}

function handleFollow(event) {
  const replyToken = event.replyToken;
  const messages = [
    { type: 'text', text: 'üè† ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà The House Solution!' },
    { type: 'text', text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô', quickReply: { items: [{ type: 'action', action: { type: 'message', label: '‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô', text: '‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô' }}]}}
  ];
  replyMessage(replyToken, messages);
}

function handleUnfollow(event) {
  updateUserStatus(event.source.userId, 'Inactive');
}

// ==================== Conversational Flows ====================
function handleRegistration(replyToken, userId) {
  if (isUserRegistered(userId)) {
    replyMessage(replyToken, [{ type: 'text', text: '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‚úÖ' }]);
    return;
  }
  setUserState(userId, 'registering', { step: 1 });
  replyMessage(replyToken, [{ type: 'text', text: 'üìù ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô\n‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1/4\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ "‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•"', quickReply: { items: [{ type: 'action', action: { type: 'message', label: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å', text: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å' }}]}}]);
}

function processRegistration(replyToken, userId, text) {
  if (text.toLowerCase() === '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å') {
    clearUserState(userId);
    replyMessage(replyToken, [{ type: 'text', text: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß' }]);
    return;
  }
  
  const state = getUserState(userId);
  
  switch (state.step) {
    case 1: // Get Full Name
      state.fullName = text;
      state.step = 2;
      setUserState(userId, 'registering', state);
      replyMessage(replyToken, [{ type: 'text', text: `‡∏ä‡∏∑‡πà‡∏≠: ${text}\n‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2/4\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ "‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡πâ‡∏≤‡∏ô/‡∏´‡πâ‡∏≠‡∏á"` }]);
      break;
    case 2: // Get Unit Number
      state.unitNumber = text;
      state.step = 3;
      setUserState(userId, 'registering', state);
      replyMessage(replyToken, [{ type: 'text', text: `‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà: ${text}\n‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3/4\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå"` }]);
      break;
    case 3: // Get Phone Number
      if (!isValidPhone(text)) {
        replyMessage(replyToken, [{ type: 'text', text: '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà' }]);
        return;
      }
      state.phone = text;
      state.step = 4;
      setUserState(userId, 'registering', state);
      replyMessage(replyToken, [{ type: 'text', text: `‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£: ${text}\n‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 4/4\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ "‡∏≠‡∏µ‡πÄ‡∏°‡∏•"` }]);
      break;
    case 4: // Get Email and finalize
      if (!isValidEmail(text)) {
        replyMessage(replyToken, [{ type: 'text', text: '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà' }]);
        return;
      }
      state.email = text;
      const success = createMember(userId, state);
      clearUserState(userId);
      if (success) {
        replyMessage(replyToken, [
          { type: 'text', text: `‚úÖ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì ${state.fullName}` },
          { type: 'text', text: '‡∏û‡∏¥‡∏°‡∏û‡πå "‡πÄ‡∏°‡∏ô‡∏π" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÄ‡∏°‡∏ô‡∏π‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' }
        ]);
      } else {
        replyMessage(replyToken, [{ type: 'text', text: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô' }]);
      }
      break;
  }
}

// ==================== Bot Feature Functions ====================
function handleShowMenu(replyToken) { replyMessage(replyToken, [createFlexMenu()]); }

function createFlexMenu() {
  return {
    type: 'flex',
    altText: '‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å The House Solution',
    contents: {
      type: 'bubble',
      size: 'giga',
      header: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'text',
            text: 'üè† The House Solution',
            size: 'xl',
            weight: 'bold',
            color: '#ffffff',
            align: 'center'
          },
          {
            type: 'text',
            text: '‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏ô‡∏¥‡∏ï‡∏¥‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞',
            size: 'sm',
            color: '#ffffff',
            align: 'center',
            margin: 'sm'
          }
        ],
        backgroundColor: '#3b82f6',
        paddingAll: 'xl'
      },
      body: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'box',
            layout: 'horizontal',
            contents: [
              createMenuButton('üí∞', '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏¥‡∏•', '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏¥‡∏•'),
              createMenuButton('üîß', '‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°', '‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°'),
              createMenuButton('üì¶', '‡∏¢‡∏∑‡∏°‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå', '‡∏¢‡∏∑‡∏°‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå')
            ],
            spacing: 'sm'
          },
          {
            type: 'box',
            layout: 'horizontal',
            contents: [
              createMenuButton('üìÖ', '‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°', '‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°'),
              createMenuButton('üìû', '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠', '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠'),
              createMenuButton('üë§', '‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå', '‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå')
            ],
            spacing: 'sm',
            margin: 'md'
          }
        ],
        paddingAll: 'lg'
      },
      footer: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'text',
            text: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
            size: 'xs',
            color: '#999999',
            align: 'center'
          }
        ],
        paddingAll: 'sm'
      }
    }
  };
}

function createMenuButton(icon, label, action) {
  return {
    type: 'box',
    layout: 'vertical',
    contents: [
      {
        type: 'text',
        text: icon,
        size: 'xxl',
        align: 'center'
      },
      {
        type: 'text',
        text: label,
        size: 'xs',
        align: 'center',
        margin: 'sm',
        wrap: true
      }
    ],
    backgroundColor: '#f3f4f6',
    cornerRadius: 'md',
    paddingAll: 'lg',
    action: {
      type: 'message',
      label: label,
      text: action
    }
  };
}

function handleCheckBill(replyToken, userId) { 
  const member = getMemberByLineId(userId);
  if (!member) {
    replyMessage(replyToken, [{ type: 'text', text: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' }]);
    return;
  }
  
  // ‡∏î‡∏∂‡∏á‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  const invoices = getInvoicesByMemberId(member.member_id);
  
  if (invoices.length === 0) {
    replyMessage(replyToken, [{ type: 'text', text: 'üìã ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì' }]);
    return;
  }
  
  const latestInvoice = invoices[0];
  const flexMessage = createInvoiceFlexMessage(latestInvoice);
  replyMessage(replyToken, [flexMessage]);
}

function handleMaintenance(replyToken, userId) { 
  const quickReply = {
    items: [
      {
        type: 'action',
        action: {
          type: 'postback',
          label: 'üí° ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤',
          data: 'action=maintenanceCategory&category=electrical'
        }
      },
      {
        type: 'action',
        action: {
          type: 'postback',
          label: 'üöø ‡∏õ‡∏£‡∏∞‡∏õ‡∏≤',
          data: 'action=maintenanceCategory&category=plumbing'
        }
      },
      {
        type: 'action',
        action: {
          type: 'postback',
          label: 'üèóÔ∏è ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á',
          data: 'action=maintenanceCategory&category=structure'
        }
      },
      {
        type: 'action',
        action: {
          type: 'postback',
          label: 'üì¶ ‡∏≠‡∏∑‡πà‡∏ô‡πÜ',
          data: 'action=maintenanceCategory&category=other'
        }
      }
    ]
  };
  
  replyMessage(replyToken, [{
    type: 'text',
    text: 'üîß ‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°:',
    quickReply: quickReply
  }]);
}
function handleEquipmentBooking(replyToken, userId) { replyMessage(replyToken, [{ type: 'text', text: 'üì¶ ‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏∑‡∏°-‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå\n‚ö†Ô∏è ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤' }]); }
function handleEvents(replyToken, userId) { replyMessage(replyToken, [{ type: 'text', text: 'üìÖ ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ô‡∏¥‡∏ï‡∏¥‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•\n‚ö†Ô∏è ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤' }]); }
function handleContact(replyToken) { replyMessage(replyToken, [{ type: 'text', text: 'üìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ô‡∏¥‡∏ï‡∏¥‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•\n\n' + 'üè¢ ‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô: ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏™‡πÇ‡∏°‡∏™‡∏£ ‡∏ä‡∏±‡πâ‡∏ô 1\n' + 'üì± ‡πÇ‡∏ó‡∏£: 02-XXX-XXXX' }]); }
function handleProfile(replyToken, userId) {
  const member = getMemberByLineId(userId);
  if (!member) { replyMessage(replyToken, [{ type: 'text', text: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì' }]); return; }
  const profileText = `üë§ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß\n\n‡∏ä‡∏∑‡πà‡∏≠: ${member.first_name} ${member.last_name}\n‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà: ${member.unit_number}\n‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå: ${member.phone_number}\n‡∏≠‡∏µ‡πÄ‡∏°‡∏•: ${member.email}`;
  replyMessage(replyToken, [{ type: 'text', text: profileText }]);
}
function handleDefaultMessage(replyToken) { replyMessage(replyToken, [{ type: 'text', text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå "‡πÄ‡∏°‡∏ô‡∏π" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ' }]); }

// ==================== Maintenance Process Functions ====================
function processMaintenanceReport(replyToken, userId, text) {
  if (text === '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°' || text.toLowerCase() === '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å') {
    clearUserState(userId);
    replyMessage(replyToken, [{ type: 'text', text: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß' }]);
    return;
  }
  
  const state = getUserState(userId);
  const member = getMemberByLineId(userId);
  
  switch (state.step) {
    case 1: // Get problem description
      state.description = text;
      state.step = 2;
      setUserState(userId, 'maintenance_reporting', state);
      
      replyMessage(replyToken, [{
        type: 'text',
        text: `üìù ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤: ${text}\n\n‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2/2\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠`,
        quickReply: {
          items: [{
            type: 'action',
            action: {
              type: 'message',
              label: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ',
              text: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ'
            }
          }]
        }
      }]);
      break;
      
    case 2: // Get confirmation or handle "no photo"
      if (text === '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ') {
        // Save maintenance request without photo
        const maintenanceId = saveMaintenance(member.member_id, state.category, state.description, null);
        clearUserState(userId);
        
        if (maintenanceId) {
          replyMessage(replyToken, [{
            type: 'text',
            text: `‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n\n‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°: ${maintenanceId}\n‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${state.categoryText}\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${state.description}\n\n‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á`
          }]);
        } else {
          replyMessage(replyToken, [{ type: 'text', text: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á' }]);
        }
      }
      break;
  }
}

// ==================== Database Functions ====================
function getSpreadsheet() { return SpreadsheetApp.openById(getLineSpreadsheetId()); }
function getMemberByLineId(lineId) {
  try {
    const sheet = getSpreadsheet().getSheetByName(SHEETS.MEMBERS);
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    const lineIdIndex = headers.indexOf('line_id');
    for (let i = 1; i < data.length; i++) {
      if (data[i][lineIdIndex] === lineId) {
        const member = {};
        headers.forEach((header, index) => { member[header] = data[i][index]; });
        return member;
      }
    }
    return null;
  } catch (error) { console.error('Error in getMemberByLineId:', error); return null; }
}
function isUserRegistered(lineId) { return getMemberByLineId(lineId) !== null; }
function createMember(lineId, data) {
  try {
    const sheet = getSpreadsheet().getSheetByName(SHEETS.MEMBERS);
    const memberId = 'MEM-' + new Date().getTime();
    const names = data.fullName.split(' ');
    const firstName = names[0];
    const lastName = names.slice(1).join(' ');
    sheet.appendRow([ memberId, lineId, firstName, lastName, data.unitNumber, data.phone, data.email, new Date(), 'Active', '', '' ]);
    return true;
  } catch (error) { console.error('Error in createMember:', error); return false; }
}
function updateUserStatus(lineId, status) {
  try {
    const sheet = getSpreadsheet().getSheetByName(SHEETS.MEMBERS);
    const data = sheet.getDataRange().getValues();
    const lineIdIndex = data[0].indexOf('line_id');
    const statusIndex = data[0].indexOf('status');
    for (let i = 1; i < data.length; i++) {
      if (data[i][lineIdIndex] === lineId) {
        sheet.getRange(i + 1, statusIndex + 1).setValue(status);
        break;
      }
    }
  } catch (error) { console.error('Error in updateUserStatus:', error); }
}

// ==================== Invoice & Bill Functions ====================
function getInvoicesByMemberId(memberId) {
  try {
    const sheet = getSpreadsheet().getSheetByName(SHEETS.INVOICES);
    const data = sheet.getDataRange().getValues();
    const headers = data[0];
    const memberIdIndex = headers.indexOf('member_id');
    
    const invoices = [];
    for (let i = 1; i < data.length; i++) {
      if (data[i][memberIdIndex] === memberId) {
        const invoice = {};
        headers.forEach((header, index) => {
          invoice[header] = data[i][index];
        });
        invoices.push(invoice);
      }
    }
    
    // Sort by issue date, newest first
    invoices.sort((a, b) => new Date(b.issue_date) - new Date(a.issue_date));
    return invoices;
  } catch (error) {
    console.error('Error getting invoices:', error);
    return [];
  }
}

function createInvoiceFlexMessage(invoice) {
  const statusColor = invoice.status === 'Paid' ? '#00C851' : 
                     invoice.status === 'Overdue' ? '#ff4444' : '#ffbb33';
  const statusText = invoice.status === 'Paid' ? '‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡πâ‡∏ß' : 
                     invoice.status === 'Overdue' ? '‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏≥‡∏£‡∏∞' : '‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞';
  
  return {
    type: 'flex',
    altText: `‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ ${invoice.invoice_id}`,
    contents: {
      type: 'bubble',
      header: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'text',
            text: '‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ',
            color: '#ffffff',
            size: 'xl',
            weight: 'bold'
          },
          {
            type: 'text',
            text: invoice.invoice_id || 'N/A',
            color: '#ffffff',
            size: 'md'
          }
        ],
        backgroundColor: '#4285f4',
        paddingAll: '20px'
      },
      body: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'box',
            layout: 'horizontal',
            contents: [
              {
                type: 'text',
                text: '‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà:',
                color: '#666666',
                flex: 3
              },
              {
                type: 'text',
                text: invoice.unit_number || 'N/A',
                flex: 5
              }
            ]
          },
          {
            type: 'separator',
            margin: 'md'
          },
          {
            type: 'box',
            layout: 'horizontal',
            contents: [
              {
                type: 'text',
                text: '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:',
                color: '#666666',
                flex: 3
              },
              {
                type: 'text',
                text: invoice.description || 'N/A',
                flex: 5,
                wrap: true
              }
            ],
            margin: 'md'
          },
          {
            type: 'box',
            layout: 'horizontal',
            contents: [
              {
                type: 'text',
                text: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô:',
                color: '#666666',
                flex: 3
              },
              {
                type: 'text',
                text: '‡∏ø' + formatNumber(invoice.total_amount || 0),
                flex: 5,
                size: 'lg',
                weight: 'bold',
                color: '#ff5722'
              }
            ],
            margin: 'md'
          },
          {
            type: 'box',
            layout: 'horizontal',
            contents: [
              {
                type: 'text',
                text: '‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î:',
                color: '#666666',
                flex: 3
              },
              {
                type: 'text',
                text: formatDate(invoice.due_date),
                flex: 5
              }
            ],
            margin: 'md'
          },
          {
            type: 'box',
            layout: 'horizontal',
            contents: [
              {
                type: 'text',
                text: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:',
                color: '#666666',
                flex: 3
              },
              {
                type: 'text',
                text: statusText,
                flex: 5,
                color: statusColor,
                weight: 'bold'
              }
            ],
            margin: 'md'
          }
        ],
        paddingAll: '20px'
      }
    }
  };
}

// ==================== Maintenance Functions ====================
function saveMaintenance(memberId, category, description, photoUrl) {
  try {
    const sheet = getSpreadsheet().getSheetByName(SHEETS.MAINTENANCE);
    const maintenanceId = 'MAIN-' + new Date().getTime();
    const now = new Date();
    
    sheet.appendRow([
      maintenanceId,
      memberId,
      category,
      description,
      photoUrl || '',
      now,
      'Pending',
      '',
      ''
    ]);
    
    return maintenanceId;
  } catch (error) {
    console.error('Error saving maintenance:', error);
    return null;
  }
}

// ==================== Utility Functions ====================
function formatNumber(num) {
  return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
}

function formatDate(date) {
  if (!date) return 'N/A';
  const d = new Date(date);
  const months = ['‡∏°.‡∏Ñ.', '‡∏Å.‡∏û.', '‡∏°‡∏µ.‡∏Ñ.', '‡πÄ‡∏°.‡∏¢.', '‡∏û.‡∏Ñ.', '‡∏°‡∏¥.‡∏¢.', '‡∏Å.‡∏Ñ.', '‡∏™.‡∏Ñ.', '‡∏Å.‡∏¢.', '‡∏ï.‡∏Ñ.', '‡∏û.‡∏¢.', '‡∏ò.‡∏Ñ.'];
  return `${d.getDate()} ${months[d.getMonth()]} ${d.getFullYear() + 543}`;
}

// ==================== Testing Functions ====================
function testChannelAccessToken() {
  const url = 'https://api.line.me/v2/bot/info';
  const options = {
    method: 'get',
    headers: {
      'Authorization': 'Bearer ' + getChannelAccessToken()
    }
  };
  
  try {
    const response = UrlFetchApp.fetch(url, options);
    console.log('Channel Access Token test response:', response.getContentText());
    return response.getResponseCode() === 200;
  } catch (error) {
    console.error('Error testing Channel Access Token:', error);
    return false;
  }
}

function testSpreadsheetConnection() {
  try {
    const sheet = SpreadsheetApp.openById(getLineSpreadsheetId());
    console.log('Spreadsheet connection successful:', sheet.getName());
    return true;
  } catch (error) {
    console.error('Error connecting to spreadsheet:', error);
    return false;
  }
}

function testBotSystem() {
  console.log('=== Testing Bot System ===');
  
  // Test 1: Channel Access Token
  console.log('Testing Channel Access Token...');
  const tokenValid = testChannelAccessToken();
  console.log('Channel Access Token valid:', tokenValid);
  
  // Test 2: Spreadsheet Connection
  console.log('Testing Spreadsheet connection...');
  const sheetConnected = testSpreadsheetConnection();
  console.log('Spreadsheet connected:', sheetConnected);
  
  // Test 3: Test creating flex menu
  console.log('Testing Flex Menu creation...');
  try {
    const menu = createFlexMenu();
    console.log('Flex Menu created successfully');
  } catch (error) {
    console.error('Error creating Flex Menu:', error);
  }
  
  console.log('=== Bot System Test Complete ===');
  return {
    channelToken: tokenValid,
    spreadsheet: sheetConnected
  };
}

// ==================== State Management ====================
function getUserState(userId) {
  const cache = CacheService.getScriptCache();
  const state = cache.get(`state_${userId}`);
  return state ? JSON.parse(state) : null;
}
function setUserState(userId, state, data = {}) {
  const cache = CacheService.getScriptCache();
  const stateData = { state: state, ...data };
  cache.put(`state_${userId}`, JSON.stringify(stateData), 300); // Store state for 5 minutes
}
function clearUserState(userId) {
  const cache = CacheService.getScriptCache();
  cache.remove(`state_${userId}`);
}

// ==================== LINE API Wrappers ====================

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡πá‡∏ß - ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö immediate response
 */
function quickReply(replyToken, message) {
  try {
    const token = getChannelAccessToken();
    if (!token) {
      console.error('No token available for quick reply');
      return;
    }
    
    const payload = {
      replyToken: replyToken,
      messages: [{ type: 'text', text: message }]
    };
    
    const options = {
      method: 'post',
      contentType: 'application/json',
      headers: { 'Authorization': 'Bearer ' + token },
      payload: JSON.stringify(payload),
      muteHttpExceptions: true
    };
    
    // ‡∏™‡πà‡∏á‡πÅ‡∏ö‡∏ö fire-and-forget ‡πÑ‡∏°‡πà‡∏£‡∏≠ response
    UrlFetchApp.fetch(CONFIG.LINE_REPLY_URL, options);
    console.log('Quick reply sent:', message.substring(0, 50));
    
  } catch (error) {
    console.error('Quick reply error:', error);
  }
}

function replyMessage(replyToken, messages) {
  try {
    console.log('=== replyMessage START ===');
    console.log('Reply Token:', replyToken);
    console.log('Messages to send:', JSON.stringify(messages));
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Channel Access Token
    const token = getChannelAccessToken();
    console.log('Channel Access Token available:', token ? 'Yes' : 'No');
    
    if (!token) {
      console.error('No Channel Access Token found!');
      return;
    }
    
    const payload = { replyToken: replyToken, messages: messages };
    const options = { 
      method: 'post', 
      contentType: 'application/json', 
      headers: { 'Authorization': 'Bearer ' + token }, 
      payload: JSON.stringify(payload), 
      muteHttpExceptions: true 
    };
    
    console.log('Sending request to LINE API...');
    const response = UrlFetchApp.fetch(CONFIG.LINE_REPLY_URL, options);
    
    console.log('LINE API Response Code:', response.getResponseCode());
    console.log('LINE API Response:', response.getContentText());
    
    if (response.getResponseCode() !== 200) {
      console.error('LINE API Error:', response.getContentText());
      
      // ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ Push Message ‡πÅ‡∏ó‡∏ô‡∏ñ‡πâ‡∏≤ Reply ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
      console.log('Attempting to use Push Message instead...');
      // ‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ userId ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö push message
    } else {
      console.log('‚úÖ Message sent successfully!');
    }
    
    console.log('=== replyMessage END ===');
    return response;
  } catch (error) {
    console.error('Error in replyMessage:', error);
    console.error('Error details:', error.toString());
    
    // ‡∏™‡πà‡∏á simple text response ‡πÅ‡∏ó‡∏ô
    try {
      console.log('Attempting simple reply...');
      const simplePayload = { 
        replyToken: replyToken, 
        messages: [{ type: 'text', text: '‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•...' }] 
      };
      
      const simpleOptions = { 
        method: 'post', 
        contentType: 'application/json', 
        headers: { 'Authorization': 'Bearer ' + getChannelAccessToken() }, 
        payload: JSON.stringify(simplePayload), 
        muteHttpExceptions: true 
      };
      
      UrlFetchApp.fetch(CONFIG.LINE_REPLY_URL, simpleOptions);
    } catch (fallbackError) {
      console.error('Fallback reply also failed:', fallbackError);
    }
  }
}

// ==================== Helper Functions ====================
function isValidPhone(phone) { return /^\d{9,10}$/.test(phone.replace(/\D/g,'')); }
function isValidEmail(email) { return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email); }
function parsePostbackData(dataString) {
    const params = {};
    if (dataString) {
        const pairs = dataString.split('&');
        for (let i = 0; i < pairs.length; i++) {
            const pair = pairs[i].split('=');
            if (pair.length === 2) {
                params[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1] || '');
            }
        }
    }
    return params;
}
